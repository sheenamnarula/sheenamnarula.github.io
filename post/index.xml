<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sheenam Narula</title>
    <link>http://sheenamnarula1993.github.io/post/</link>
    <description>Recent content in Posts on Sheenam Narula</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Oct 2020 00:00:00 +0530</lastBuildDate><atom:link href="http://sheenamnarula1993.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes Configuration file</title>
      <link>http://sheenamnarula1993.github.io/post/kubernetes-part-3/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0530</pubDate>
      
      <guid>http://sheenamnarula1993.github.io/post/kubernetes-part-3/</guid>
      <description>In this post, we will understand the different parts of configuration file of kubernetes by deploying a node application. For this post, you can find github code at :
https://github.com/sheenamnarula/Node-mongo-kubernetes Refer this repository that contains dockerised node application code and configuration files for kubernetes deployment for better understanding.
Second Option : Create a node app and dockerise it. For dockerisation of node app, you can follow below post :
 http://sheenamnarula93.</description>
    </item>
    
    <item>
      <title>Kubernetes Local System Set up</title>
      <link>http://sheenamnarula1993.github.io/post/kubernetes-part-2/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0530</pubDate>
      
      <guid>http://sheenamnarula1993.github.io/post/kubernetes-part-2/</guid>
      <description>Get started with Kubernetes on local system To get started with kubernetes on your local system, you can use minikube. Minikube is basically local kubernets which helps to learn and develop kubernetes locally.All you need is Docker (or similarly compatible) container or a Virtual Machine environment
Installation process and important commands of minikube is given as below :
Installation of minikube on Linux curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux- sudo install minikube-linux-amd64 /usr/local/bin/minikube Command to Start cluster minikube start Command to Stop cluster minikube stop Command to Delete cluster minikube delete --all Minikube Dashboard There are commands to manage and access cluster but for ease, we will use dashboard provided by minikube where each and every detail of cluster can be seen and managed.</description>
    </item>
    
    <item>
      <title>Kubernetes Architecture</title>
      <link>http://sheenamnarula1993.github.io/post/kubernetes-part-1/</link>
      <pubDate>Thu, 15 Oct 2020 00:00:00 +0530</pubDate>
      
      <guid>http://sheenamnarula1993.github.io/post/kubernetes-part-1/</guid>
      <description>Kubernetes Vocab : Node : It is an instance of computer which is also known as worker nodes.
Pods : It is a smallest unit of kubernetes that we can deploy on kubernets cluster.It contain container&amp;rsquo;s image. Bascially a pod is a collection of more than one conatiners which are supposed run on one host logically.
When a pod is created, an ip address is assigned to it.When a worker node dies, replica of that pod is created but with different ip address and different volumes.</description>
    </item>
    
    <item>
      <title>Import Vs Require</title>
      <link>http://sheenamnarula1993.github.io/post/import-require/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0530</pubDate>
      
      <guid>http://sheenamnarula1993.github.io/post/import-require/</guid>
      <description>Syntax of import/export : file : exportVar.js
export const m = 1 ; file : importVar.js
import {m} from exportVar.js Syntax of require : file : exportVar.js
const m = 1; module.exports = m ; file: importVar.js
const m = require(&#39;./exportVar.js&#39;) Loading Strategy : Mainly import/export i.e. ES6 structure, involves asynchronous loading of modules. But in case of require(), synchronous loading of modules takes place. It means, if a file needs to load 5 modules, in case of ES6 structure, second module won&amp;rsquo;t wait for first module to be loaded completely.</description>
    </item>
    
    <item>
      <title>Containerization Vs Virtualization</title>
      <link>http://sheenamnarula1993.github.io/post/containerization-vs-vm/</link>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +0530</pubDate>
      
      <guid>http://sheenamnarula1993.github.io/post/containerization-vs-vm/</guid>
      <description>Containerization : Containerization is a lightweight alternative to full machine virtualization that involves encapsulating an application in a container with its own operating environment. Containers use the same host operating system (OS) repeatedly, instead of installing an OS for each guest VM.
Virtualization : A virtual machine is a copy of a complete server basically it has its own OS which is treated as a guest OS on host OS.</description>
    </item>
    
    <item>
      <title>Node-Docker-Aws Part-2</title>
      <link>http://sheenamnarula1993.github.io/post/express-docker-aws-2/</link>
      <pubDate>Sat, 29 Jun 2019 00:00:00 +0530</pubDate>
      
      <guid>http://sheenamnarula1993.github.io/post/express-docker-aws-2/</guid>
      <description>I am assuming that an amazon account is already set up to use the Amazon Elastic Container Service(ECS).
Steps to deploy two containers(app + database) -
 Dockerise app Create Registry(ECR) Upload app image to ECR Create task definition with two containers Create a cluster Create a service and run it.  Practical Explanation of steps : 1. Dockerise app for this you can check this practice project : https://github.com/sheenamnarula/node-graphql-docker-aws</description>
    </item>
    
    <item>
      <title>Node-Docker-Aws Part-1</title>
      <link>http://sheenamnarula1993.github.io/post/express-docker-aws-1/</link>
      <pubDate>Fri, 28 Jun 2019 00:00:00 +0530</pubDate>
      
      <guid>http://sheenamnarula1993.github.io/post/express-docker-aws-1/</guid>
      <description>First of all, make a project in node-express-mongo and dockerise it. Here I am giving a github link of a basic node-express app made along with graphql as this has become my favourite language because of its advantage of providing independence to front-end developers.
Github link for dockerised app : https://github.com/sheenamnarula/node-graphql-docker-aws Docker File Lets understand first, what is the meaning of lines written in the docker file.
From node:8.9.0 This line specifies the base image.</description>
    </item>
    
    <item>
      <title>Basic Docker Commands</title>
      <link>http://sheenamnarula1993.github.io/post/docker-basic-commands/</link>
      <pubDate>Mon, 24 Jun 2019 00:00:00 +0530</pubDate>
      
      <guid>http://sheenamnarula1993.github.io/post/docker-basic-commands/</guid>
      <description>Show commands and Management commands  $ docker  Docker version :  $ docker --version  Show info like number of containers  $ docker info  Commands required for Containers Command to run a container in foreground :  $ docker container run -it -p 80:80 {image name}  Example : docker container run -it -p 80:80 nginx
Command to run a container in backround :  $ docker container run -d -p 80:80 {image name}  Short hand command  $ docker container run -d -p 80:80 {image name}  Naming custom names to container  $ docker container run -p 80:80 --name {container name} {image name}  Example : docker container run -d -p 80:80 &amp;ndash;name nginx-server nginx</description>
    </item>
    
    <item>
      <title>Scala Part-2</title>
      <link>http://sheenamnarula1993.github.io/post/scalaprojectstructure/</link>
      <pubDate>Thu, 20 Jun 2019 00:00:00 +0530</pubDate>
      
      <guid>http://sheenamnarula1993.github.io/post/scalaprojectstructure/</guid>
      <description>.idea/— contains IntelliJ’s project specific settings files. According to JetBrains, normally there is no need to edit the contents of this folder.
build.sbt — contains build definition of the project. For example, project name, project version, scalaVersion, libraryDependencies, etc. Note that this file is written in Scala.
project/—because build.sbt is written in Scala, we need to build build.sbt. Therefore, this folder contains all the files needed for building build.sbt.
project/build.properties — this file contains build definition of build.</description>
    </item>
    
    <item>
      <title>Scala Part-1</title>
      <link>http://sheenamnarula1993.github.io/post/scala/</link>
      <pubDate>Wed, 19 Jun 2019 00:00:00 +0530</pubDate>
      
      <guid>http://sheenamnarula1993.github.io/post/scala/</guid>
      <description>SBT is a popular tool for compiling, running, and testing Scala projects of any size. Using a build tool such as sbt (or Maven/Gradle) becomes essential once you create projects with dependencies or more than one code file.
When you write small programs that consist of only one, or just two or three source files, then it&amp;rsquo;s easy enough to compile those source files by typing scalac MyProgram.scala in the command line.</description>
    </item>
    
    <item>
      <title>Cold War</title>
      <link>http://sheenamnarula1993.github.io/post/cold-war/</link>
      <pubDate>Tue, 04 Jun 2019 00:00:00 +0530</pubDate>
      
      <guid>http://sheenamnarula1993.github.io/post/cold-war/</guid>
      <description>The cold war was a state of geopolitical tension after second world war between Eastern Bloc(The Soviet Union and its satellite states) and Western Bloc(the United States and its NATO Alies)
Cold war era - 1947 to 1989/1991. But actually it doesnot have any fix date.
Why is it called cold war : No direct combat or fight between USSR + Allies and US + allies but there were proxy wars like Korean War,Vietnam War and Afghanistan war.</description>
    </item>
    
    <item>
      <title>Basic Electronics Part-1</title>
      <link>http://sheenamnarula1993.github.io/post/basic-electronics/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0530</pubDate>
      
      <guid>http://sheenamnarula1993.github.io/post/basic-electronics/</guid>
      <description>(NO DEFINITIONS ,ONLY UNDERSTANDING) We all have heard the term, Electricity.
But when we need to explain this term, we can see the working fan, glowing tube and yes, after plugging in phone&amp;rsquo;s charger, simply we can see the increasing percentage sign. Have you ever tried to explore, what is this Electricity ? What does this contain due to which phone&amp;rsquo;s battery is charging and i am able to use it in daily life and yes, what is this term charging means ?</description>
    </item>
    
  </channel>
</rss>
